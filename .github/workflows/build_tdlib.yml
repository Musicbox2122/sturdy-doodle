name: Build Specific TDLib Version (1.8.35)

on:
  workflow_dispatch: # Позволяет запускать вручную

jobs:
  build_tdlib_for_android:
    runs-on: ubuntu-latest # Используем последнюю версию Ubuntu
    
    steps:
    - name: Checkout code (full depth)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Клонируем всю историю нашего репозитория (где лежит этот workflow)

    - name: Install build dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y \
          gperf clang cmake make git \
          zlib1g-dev \
          libssl-dev \
          openjdk-11-jdk # JDK для Gradle в примере TDLib
        echo "--- Installed versions ---"
        java -version
        cmake --version
        clang --version
        git --version
        echo "-------------------------"

    - name: Clone TDLib repository and checkout specific version
      run: |
        echo "Cloning TDLib repository..."
        git clone https://github.com/tdlib/td.git td # Стандартный полный клон
        cd td
        echo "Current directory: $(pwd)"
        echo "Fetching all tags from remote 'origin'..."
        git fetch origin --tags # Явно указываем origin и --tags
        echo "Available tags (listing all, searching for v1.8.35):"
        git tag --list # Выведем все теги для проверки
        echo "--- Checking specifically for v1.8.35 ---"
        git tag --list | grep "v1.8.35" || echo "Tag v1.8.35 not found in list"
        echo "-----------------------------------------"
        echo "Attempting to checkout tag v1.8.35..."
        git checkout v1.8.35
        # git submodule update --init --recursive # Пока оставим закомментированным, активируем если понадобится
        echo "Current TDLib version/tag after checkout:"
        git describe --tags

    - name: Build TDLib JNI (Native part)
      run: |
        cd td 
        mkdir -p build 
        cd build
        echo "Configuring CMake for TDLib JNI..."
        # Флаги для сборки под Android могут требовать указания NDK и ABI,
        # но пример TDLib/java обычно собирает для хост-системы (Linux в Action)
        # а затем использует prebuilt нативные библиотеки для Android в .aar.
        # Если мы хотим собрать .so для Android здесь, CMake команду нужно будет усложнить.
        # Пока пробуем собрать как в их примере для Java.
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DTD_ENABLE_JNI=ON \
              -DCMAKE_INSTALL_PREFIX:PATH=../example/java/td/libs/tdlib \
              -DTD_ENABLE_LTO=ON \
              ..
        echo "Building tdjni target..."
        # Имя цели может быть td_jni или tdjni. Проверим по CMakeLists.txt, если будут проблемы.
        cmake --build . --target tdjni --config Release -j$(nproc) 

    - name: Build AAR using Gradle from TDLib example
      run: |
        cd td/example/java 
        echo "Building AAR with Gradle..."
        # Даем права на выполнение gradlew
        chmod +x ./gradlew 
        # Имя модуля в примере TDLib - :tdlib
        ./gradlew :tdlib:assembleRelease 

    - name: Upload AAR artifact
      uses: actions/upload-artifact@v4 
      with:
        name: tdlib-android-1.8.35-release.aar 
        path: td/example/java/tdlib/build/outputs/aar/tdlib-release.aar 
        if-no-files-found: error # Завершить с ошибкой, если файл не найден
